unit USelExpediente;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ComCtrls, cxGraphics, cxControls, cxLookAndFeels,
  cxLookAndFeelPainters, dxSkinsCore, dxSkinBlack, dxSkinBlue, dxSkinBlueprint,
  dxSkinCaramel, dxSkinCoffee, dxSkinDarkRoom, dxSkinDarkSide,
  dxSkinDevExpressDarkStyle, dxSkinDevExpressStyle, dxSkinFoggy,
  dxSkinGlassOceans, dxSkinHighContrast, dxSkiniMaginary, dxSkinLilian,
  dxSkinLiquidSky, dxSkinLondonLiquidSky, dxSkinMcSkin, dxSkinMetropolis,
  dxSkinMetropolisDark, dxSkinMoneyTwins, dxSkinOffice2007Black,
  dxSkinOffice2007Blue, dxSkinOffice2007Green, dxSkinOffice2007Pink,
  dxSkinOffice2007Silver, dxSkinOffice2010Black, dxSkinOffice2010Blue,
  dxSkinOffice2010Silver, dxSkinOffice2013DarkGray, dxSkinOffice2013LightGray,
  dxSkinOffice2013White, dxSkinPumpkin, dxSkinSeven, dxSkinSevenClassic,
  dxSkinSharp, dxSkinSharpPlus, dxSkinSilver, dxSkinSpringTime, dxSkinStardust,
  dxSkinSummer2008, dxSkinTheAsphaltWorld, dxSkinsDefaultPainters,
  dxSkinValentine, dxSkinVS2010, dxSkinWhiteprint, dxSkinXmas2008Blue,
  cxContainer, cxEdit, cxListView, dxSkinsdxBarPainter, dxBar, cxClasses, DB,
  ZAbstractRODataset, ZAbstractDataset, ZDataset, umsgbox, UConection;

type
  TFrmSelExpediente = class(TForm)
    lstExpedientes: TcxListView;
    zPersonal: TZQuery;
    dxBarManager1: TdxBarManager;
    dxbrManager1Bar: TdxBar;
    dxbrManager1Bar1: TdxBar;
    dxButtonNuevo: TdxBarLargeButton;
    dxBButtonEditar: TdxBarButton;
    dxBButtonBuscar: TdxBarButton;
    dxBButtonEliminar: TdxBarButton;
    dxButtonGuardar: TdxBarLargeButton;
    dxButtonActualizar: TdxBarLargeButton;
    dxButtonCancelar: TdxBarLargeButton;
    dxButtonSalir: TdxBarLargeButton;
    dxButton2: TdxBarLargeButton;
    dxButtonExportar: TdxBarLargeButton;
    dxButtonOpcional: TdxBarLargeButton;
    dxButtonDetalle: TdxBarLargeButton;
    btnAbrir: TdxBarLargeButton;
    procedure FormShow(Sender: TObject);
    procedure btnAbrirClick(Sender: TObject);
  private
    //fMat: TFrmMaterialesxFolios;
    { Private declarations }
    procedure CrearExpedientes;
  public
    { Public declarations }
  end;

var
  FrmSelExpediente: TFrmSelExpediente;

implementation

uses
  UfrmMaterialesxFolios;
{$R *.dfm}

procedure TFrmSelExpediente.btnAbrirClick(Sender: TObject);
begin
  Application.CreateForm(TFrmMaterialesxFolios, FrmMaterialesxFolios);
  //FrmMaterialesxFolios := TFrmMaterialesxFolios.CreateByParam(Integer(lstExpedientes.Selected.Data));

  FrmMaterialesxFolios.IdPersonal := Integer(lstExpedientes.Selected.Data);
  FrmMaterialesxFolios.Show;
end;

procedure TFrmSelExpediente.CrearExpedientes;
var
  nombreCOmpleto: String;
begin
  try
    if zPersonal.Active then
    begin
      lstExpedientes.Clear;
      zPersonal.First;
      while not zPersonal.Eof do
      begin
        nombreCOmpleto := '[' +zPersonal.FieldByName('CodigoPersonal').AsString + '] ' + zPersonal.FieldByName('Nombre').AsString  + ' ' + zPersonal.FieldByName('Apaterno').AsString  + ' ' + zPersonal.FieldByName('AMaterno').AsString  ;
        with lstExpedientes.Items.Add do
        begin
          Caption := NombreCOmpleto;
          ImageIndex := 16;
          Data := Pointer(zPersonal.FieldByName('IdPersonal').AsInteger);
        end;

        zPersonal.Next;
      end;
    end;
  Except
    raise;
  end;
end;

procedure TFrmSelExpediente.FormShow(Sender: TObject);
var
  Cursor: TCursor;
begin
  try
    Cursor := Screen.Cursor;
    try
      if Not AsignarSQL(zPersonal, 'master_personal', pReadOnly) then
        raise Exception.Create(pErrorConsulta + '[master_personal]');

      if not FiltrarDataset(zPersonal, 'IdPersonal', ['-1']) then
        raise Exception.Create(pErrorFiltrar + '[master_personal]');

      if zPersonal.Active then
        zPersonal.Refresh
      else
        zPersonal.Open;

      CrearExpedientes;
    finally
      AutoFocus(TForm(self));
      Screen.Cursor := Cursor;
      AplicarTema(TForm(Self));
    end;
  except
    on e: exception do
    begin
      MsgBox.ShowModal('Error.',pMensajeError + e.Message, cmtError, [cmbOK]);
      PostMessage(Self.Handle, WM_CLOSE, 0, 0);
    end;
  end;
end;

end.
